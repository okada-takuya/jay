#+TITLE: README
#+DATE: <2015-02-15>
#+AUTHOR: Takuya Okada / Nomura Laboratory

* What is jay?
  jay is a simple markdown editor for memo and taking minutes

* Setup Ruby Environment
  | Ruby  | 2.2.1 |
  | Rails | 4.2.1 |

  I recommend you to install new Ruby and Bundler on the top of Rbenv before install jay.

  1) Install rbenv + ruby-build (check [[https://github.com/sstephenson/rbenv#basic-github-checkout][https://github.com/sstephenson/rbenv#basic-github-checkout]] for details)
     #+BEGIN_SRC sh
     $ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
     $ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
     # Edit your shell dot files to add some path and environment variables.
     #+END_SRC

  2) Install Ruby and Bundler
     #+BEGIN_SRC sh
     # Install ruby 2.2.1
     $ rbenv install 2.2.1

     # Installation check
     $ rbenv global 2.2.1
     $ ruby -v # -> You will see: ruby 2.2.1...

     # Install bundler for your new Ruby
     $ gem install bundler

     # Activate bundler
     $ rbenv rehash

     # Get back to your system default Ruby if you want
     $ rbenv global system # say, /usr/bin/ruby
     $ ruby -v
     #+END_SRC

* Install jay
** Clone jay
   1) clone jay from github
      #+BEGIN_SRC sh
      $ git clone https://github.com/nomlab/jay.git ~/Programs/jay
      #+END_SRC

   2) Setup to use installed ruby
      #+BEGIN_SRC sh
      $ cd ~/Programs/jay
      $ ruby -v # -> You will see: ruby 2.2.1...
      #+END_SRC

** Setup config files
   1) Install vendor/bundle stuffs
      #+BEGIN_SRC sh
      $ bundle install --path vendor/bundle
      #+END_SRC

   2) Setup secret key
      #+BEGIN_SRC sh
      $ bundle exec rake secret # -> You will see: foobarbuz... Copy the string.
      $ vim config/secrets.yml # -> Replace all <SECRETKEY> with the string outputted
      #+END_SRC

   3) Initialize application settings from sample
      #+BEGIN_SRC sh
      $ cp config/application_settings_sample.yml config/application_settings.yml
      #+END_SRC

   4) Set your github organization
      #+BEGIN_SRC sh
      $ vim config/application_settings.yml
      # Set as the following if your organization name is foobarbuz:
      # default: &default
      #   github:
      #     organization: foobarbuz
      #+END_SRC

   5) Setup GitHub OAuth
      1) Register a new OAuth application
         + Authorization callback URL :: http://example.com/auth/github/callback
      2) Set client id, client secret, allowed team id
         #+BEGIN_SRC sh
         $ vim config/application_settings.yml
         # Set as the following:
         # default: &default
         #   oauth:
         #     github:
         #       client_id: foo
         #       client_secret: bar
         #       ## allowed_team_id is a github team id adllowed to login.
         #       ## It can be checked by:
         #       ##   curl -u [your-github-account] https://api.github.com/orgs/:org/teams
         #       allowed_team_id: buz
         #+END_SRC

   6) Setup incoming webhook
      + GitHub
        1) Generate token
           #+BEGIN_SRC sh
           $ bundle exec rake secret # -> You will see: foobarbuz... Copy the string.
           #+END_SRC

        2) Add webhook to your repository
           + Payload URL :: http://example.com/incoming_webhook/github
           + Secret :: foobarbuz...
           + Which events would you like to trigger this webhook? :: Let me select individual events. -> Issues

        3) Set strategy and token
           #+BEGIN_SRC sh
           $ vim config/application_settings.yml
           # Set as the following:
           # default: &default
           #  incoming_webhooks:
           #    - strategy: github
           #      token: foobarbuz
           #+END_SRC

   8) Setup DB
      #+BEGIN_SRC sh
      $ bundle exec rake db:migrate
      $ bundle exec rake db:migrate RAILS_ENV=production
      #+END_SRC

* Launch jay
** development
    #+BEGIN_SRC sh
    # start
    $ export RAILS_ENV="development"
    $ export RAILS_SERVE_STATIC_FILES=true
    $ bundle exec rails server -p 3000 -d -e "$RAILS_ENV"
    $ open http://localhost:3000

    # stop
    $ kill $(cat tmp/pids/server.pid)
    #+END_SRC

** production
    #+BEGIN_SRC sh
    # start
    $ export RAILS_ENV="production"
    $ export RAILS_SERVE_STATIC_FILES=true
    $ bundle exec rails server -p 3000 -d -e "$RAILS_ENV"
    $ bundle exec rake assets:precompile RAILS_ENV="$RAILS_ENV"
    $ bundle exec rake assets:precompile:image
    $ open http://localhost:3000

    # stop
    $ kill $(cat tmp/pids/server.pid)
    #+END_SRC
